package com.aeolid.generatorproofing;

import com.intellij.codeInspection.AbstractBaseJavaLocalInspectionTool;
import com.intellij.codeInspection.ProblemDescriptorBase;
import com.intellij.codeInspection.ProblemHighlightType;
import com.intellij.codeInspection.ProblemsHolder;
import com.intellij.openapi.util.TextRange;
import com.intellij.psi.JavaElementVisitor;
import com.intellij.psi.PsiElementVisitor;
import com.intellij.psi.PsiJavaFile;
import org.jetbrains.annotations.NotNull;

import static com.aeolid.generatorproofing.Utilities.getAffectedRanges;

public class InspectionImpl extends AbstractBaseJavaLocalInspectionTool {

	private static final String PATTERNAFFECTEDFILE = " * File generated by the template based ISKV code generator";
	private static final String PATTERNSTART = "// USER SECTION BEGIN";
	private static final String PATTERNEND = "// USER SECTION END";

	private static final String ERRORTEXT = InspectionBundle.message("inspection.generatedCodePattern.display.name");

	@Override
	public boolean runForWholeFile() {
		return true;
	}

	private static class GeneratorPatternVisitor extends JavaElementVisitor {
		private final ProblemsHolder holder;

		public GeneratorPatternVisitor(ProblemsHolder holder) {
			this.holder = holder;
		}

		@Override
		public void visitJavaFile(PsiJavaFile file) {
			if (file.getFirstChild().getText().contains(PATTERNAFFECTEDFILE)) {
				for (TextRange changedRange : getAffectedRanges(file, PATTERNSTART, PATTERNEND)) {
					holder.registerProblem(new ProblemDescriptorBase(
						file,
						file,
						ERRORTEXT,
						null,
						ProblemHighlightType.ERROR,
						false,
						changedRange,
						true,
						false
					));
				}
			}
			super.visitJavaFile(file);
		}
	}

	@NotNull
	@Override
	public PsiElementVisitor buildVisitor(@NotNull final ProblemsHolder holder, boolean isOnTheFly) {
		return new GeneratorPatternVisitor(holder);
	}
}
