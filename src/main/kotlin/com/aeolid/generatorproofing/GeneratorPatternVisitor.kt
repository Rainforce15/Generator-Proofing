package com.aeolid.generatorproofing

import com.intellij.codeInspection.ProblemDescriptorBase
import com.intellij.codeInspection.ProblemHighlightType
import com.intellij.codeInspection.ProblemsHolder
import com.intellij.psi.JavaElementVisitor
import com.intellij.psi.PsiJavaFile

class GeneratorPatternVisitor(private val holder: ProblemsHolder): JavaElementVisitor() {
	private val _patternAffectedfile = " * File generated by the template based ISKV code generator"
	private val _patternStart = "// USER SECTION BEGIN"
	private val _patternEnd = "// USER SECTION END"

	private val _errorText = InspectionBundle.getMessage("inspection.generatedCodePattern.display.name")

	override fun visitJavaFile(file: PsiJavaFile) {
		if (file.firstChild.text.contains(_patternAffectedfile)) {
			for (changedRange in getAffectedRanges(file, _patternStart, _patternEnd)) {
				holder.registerProblem(ProblemDescriptorBase(
						file,
						file,
						_errorText,
						null,
						ProblemHighlightType.ERROR,
						false,
						changedRange,
						true,
						false
				))
			}
		}
		super.visitJavaFile(file)
	}
}